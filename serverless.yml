service: ms-app-nics
frameworkVersion: "3"
useDotenv: true

provider:
  stage: ${opt:stage, 'development'}
  name: aws
  region: ${env:AWS_DEFAULT_REGION, 'us-west-2'}
  deploymentMethod: direct
  deploymentPrefix: ${self:service}-${self:provider.stage}
  runtime: nodejs16.x
  versionFunctions: true
  timeout: 900
  tags:
    app: ${self:service}
    env: ${self:provider.stage}
  stackTags:
    app: ${self:service}
    env: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource: "arn:aws:dynamodb:*:*:table/${self:custom.config.AppDynamoDbTableName}"
  deploymentBucket:
    name: ${self:custom.config.deploymentBucket.name}
  endpointType: EDGE
  # endpointType: PRIVATE
  # vpcEndpointIds:
  #   - ${self:custom.config.network.vpcEndpointId}
  # vpc:
  #   securityGroupIds: ${self:custom.config.network.securityGroupIds}
  #   subnetIds: ${self:custom.config.network.subnetIds}
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    resourcePolicy:
      - Effect: Allow
        Principal: "*"
        Action: execute-api:Invoke
        Resource: "execute-api:/*"
        # Condition:
        #   StringEquals:
        #     "aws:sourceVpce": ${self:custom.config.network.vpcEndpointId}
  logs:
    restApi:
      accessLogging: true
      executionLogging: true


plugins:
  - serverless-offline
  - serverless-localstack
  - serverless-deployment-bucket
  - serverless-plugin-log-retention # Used for log retention of Lambda functions


custom:
  config: ${file(./serverless-${self:provider.stage}.yml)}
  logRetentionInDays: 7 # For Lambda functions only, see serverless-plugin-log-retention
  localstack:
    stages:
      - development
      - dev
      - local
    host: http://localstack  # optional - LocalStack host to connect to
    edgePort: 4566  # optional - LocalStack edge port to connect to
    autostart: false  # optional - Start LocalStack in Docker on Serverless deploy
    lambda:
      mountCode: false

functions:
  api:
    handler: src/index.handler
    memorySize: 4096
    timeout: 30
    events:
      - http: ANY /sample

resources:
  Resources:
    AppDynamoDB:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.config.AppDynamoDbTableName}
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
        AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableClass: STANDARD
        TimeToLiveSpecification:
          AttributeName: EXPIRATION_TIMESTAMP
          Enabled: True
        GlobalSecondaryIndexes:
        - IndexName: GSI0
          Projection:
            ProjectionType: ALL
          KeySchema:
          - AttributeName: SK
            KeyType: HASH
          - AttributeName: PK
            KeyType: RANGE

    APIRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
        Policies:
        - PolicyName: APIPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ["dynamodb:*"]
                Resource: !GetAtt AppDynamoDB.Arn
              - Effect: Allow
                Action: ["apigateway:POST"]
                Resource: 
                  Fn::Join:
                  - ''
                  - - 'arn:'
                    - !Ref AWS::Partition
                    - ":apigateway:"
                    - !Ref AWS::Region
                    - ":"
                    - !Ref AWS::AccountId
                    - ":"
                    - !Ref ApiGatewayRestApi
                    - "/"
                    - ${self:provider.stage}
                    - "/*"

    LambdaExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "arn:aws:logs:*:*:*"
                - Effect: Allow
                  Action: ["apigateway:POST"]
                  Resource: 
                    Fn::Join:
                    - ''
                    - - 'arn:'
                      - !Ref AWS::Partition
                      - ":apigateway:"
                      - !Ref AWS::Region
                      - "::/restapis/"
                      - !Ref ApiGatewayRestApi
                      - "/deployments"



    BadRequestResponse:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResponseType: DEFAULT_4XX
        ResponseTemplates:
          application/json: "{\"success\":false,\"message\":\"$context.error.validationErrorString\"}"
        StatusCode: '400'

    RestApiGatewayRootResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        PathPart: prices
        ParentId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        RestApiId:
          Ref: ApiGatewayRestApi

    EmptyModelSchema:
      Type: "AWS::ApiGateway::Model"
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        Description: "Empty Model"
        Schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "title" : "Empty Schema",
              "type" : "object"
            }
        ContentType: "application/json"
    PricesPostModel:
      Type: "AWS::ApiGateway::Model"
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        Description: "Prices"
        Schema: |
            {
              "$schema": "http://json-schema.org/draft-04/schema#",
              "title" : "Prices Schema",
              "type" : "object",
              "definitions": {
                "metadata": {
                  "type": "object",
                  "properties": {
                    "topic_name": {"type": "string"},
                    "publisher": {"type": "string"},
                    "publishing_timestamp": {"type": "integer"},
                    "publication_timestamp": {"type": "integer"},
                    "request_id": {"type": "string"}
                  },
                  "required": ["topic_name", "publisher", "publishing_timestamp", "publication_timestamp"]
                },
                "aggregate": {
                  "type": "object",
                  "properties": {
                    "id":  {"type": "string"},
                    "prices": {"type": "array", "items": {"$ref": "#/definitions/singlePrice"}}
                  },
                  "required": ["id", "prices"]
                },
                "singlePrice": {
                  "type": "object",
                  "properties": {
                    "amount":  {"type": "number"},
                    "currency_code":  {"type": "string"},
                    "price_type":  {"type": "string", "enum": ["REGULAR_PRICE", "SALE_PRICE"]},
                    "country_code": {"type": "string", "pattern": "^[A-Z]{2,2}$"}
                  },
                  "required": ["amount", "currency_code", "price_type","country_code"]
                }
              },
              "properties": {
                "metadata": { "$ref": "#/definitions/metadata"},
                "aggregate": { "$ref": "#/definitions/aggregate"}
              },
              "required": ["aggregate"]
            }
        ContentType: "application/json"

    RestApiGatewayRootPostMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResourceId: !Ref RestApiGatewayRootResource
        HttpMethod: POST
        AuthorizationType: "NONE"
        Integration:
          Credentials:
            Fn::GetAtt: 
            - APIRole
            - Arn
          Uri: !Sub
            - arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem
            - {}
          PassthroughBehavior: "when_no_match"
          IntegrationHttpMethod: POST
          Type: AWS
          RequestTemplates:
            application/json:
              Fn::Sub: 
                - |-
                  { 
                    "TableName": "${tableName}",
                    "Item": {
                            "PK": { "S": "PRICES#${productCode}" },
                            "SK": { "S": "PRICES#${payloadTimestamp}" },
                            "METADATA": { "S": "${metadata}"},
                            "AGGREGATE": { "S": "${aggregate}"},
                            "PAYLOAD": { "S": "${payload}" },
                            "PUBLICATION_TIMESTAMP": { "N": "${payloadTimestamp}" },
                            "RECEIVED_TIMESTAMP": { "N": "${currentTimestamp}" }
                          },
                    "ConditionExpression": "(attribute_not_exists(PUBLICATION_TIMESTAMP) or PUBLICATION_TIMESTAMP <= :payloadTimestamp) and (:currentTimestamp > :payloadTimestamp)",
                    "ExpressionAttributeValues": {
                      ":payloadTimestamp": {"N": "${payloadTimestamp}"},
                      ":currentTimestamp": {"N": "${currentTimestamp}"}
                    }
                  }
                - { 
                    tableName: { Ref: AppDynamoDB }, 
                    productCode: "$util.escapeJavaScript($input.path('$.aggregate.id'))", 
                    payload: "$util.escapeJavaScript($input.body)",
                    metadata: "$util.escapeJavaScript($input.json('$.metadata'))",
                    aggregate: "$util.escapeJavaScript($input.json('$.aggregate'))",
                    currentTimestamp: "$context.requestTimeEpoch",
                    payloadTimestamp: "$util.escapeJavaScript($input.path('$.metadata.publication_timestamp'))",
                  }
          IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: 2\d{2}
            ResponseParameters: {}
            ResponseTemplates: 
              application/json: |
                {"status": "200"}
          - StatusCode: 400
            SelectionPattern: 4\d{2}
            ResponseParameters: {}
            ResponseTemplates: 
              application/json: |
                #set($message = $input.path('$.message'))
                #if($message == "The conditional request failed")
                  #set($message = "Timestamp Validation Failed. The original request contains a publication_timestamp / publishing_timestamp of the future.")
                #end
                {"status": "400", "error: "$util.escapeJavaScript($message)"}
        RequestValidatorId:
          Ref: RestApiGatewayRootPostRequestValidator
        RequestModels:
          "application/json": !Ref PricesPostModel
        MethodResponses:
        - ResponseParameters:
          ResponseModels: {}
          StatusCode: 200
        - ResponseParameters: {}
          ResponseModels: {}
          StatusCode: 400
        - ResponseParameters: {}
          ResponseModels: {}
          StatusCode: 500

    RestApiGatewayRootPostRequestValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties: 
        RestApiId: !Ref ApiGatewayRestApi
        ValidateRequestBody: True
        ValidateRequestParameters: False
    
    RestApiGatewayProductCodeResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ParentId: !Ref RestApiGatewayRootResource
        PathPart: "{productCode+}"

    RestApiGatewayProductGetMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResourceId: !Ref RestApiGatewayProductCodeResource
        HttpMethod: GET
        AuthorizationType: "NONE"
        Integration:
          Credentials:
            Fn::GetAtt: 
            - APIRole
            - Arn
          Uri: !Sub
            - arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query
            - {}
          PassthroughBehavior: "when_no_match"
          IntegrationHttpMethod: POST
          Type: AWS
          RequestTemplates:
            application/json:
              Fn::Sub: 
                - |-
                  { 
                    "ConsistentRead": true,
                    "TableName": "${tableName}",
                    "ScanIndexForward": false,
                    "KeyConditionExpression": "PK = :keyParam",
                    "ExpressionAttributeValues": {
                      ":keyParam": { "S": "PRICES#${productCode}"}
                    }
                  }
                - { 
                    tableName: { Ref: AppDynamoDB }, 
                    productCode: "$util.escapeJavaScript($input.params('productCode'))"
                  }
          IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: 2\d{2}
            ResponseParameters: {}
            ResponseTemplates: 
              application/json: |
                #set($inputRoot = $input.path('$'))
                #set($count = $input.path('$.Count'))
                {
                  "count": $count,
                  "items": [
                    #foreach($item in $inputRoot.Items)
                    {
                      "aggregate": $item.AGGREGATE.S, 
                      "metadata": $item.METADATA.S, 
                      "timeline": {"received_by_pricing_at": $item.RECEIVED_TIMESTAMP.N}
                    }
                    #if($foreach.hasNext),#end
                    #end
                  ]
                }

              
          - StatusCode: 400
            SelectionPattern: 4\d{2}
            ResponseParameters: {}
            ResponseTemplates: 
              application/json: |
                {"status": "400"}
        MethodResponses:
        - ResponseParameters:
          ResponseModels: {}
          StatusCode: 200
        - ResponseParameters: {}
          ResponseModels: {}
          StatusCode: 400
        - ResponseParameters: {}
          ResponseModels: {}
          StatusCode: 500